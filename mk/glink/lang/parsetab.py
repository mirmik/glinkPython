
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = 'E5333995FD39E6D6B03A61B64F5C1F1E'
    
_lr_action_items = {'$end':([0,1,3,4,6,7,8,10,11,13,16,18,19,21,22,23,25,26,27,28,29,30,31,32,35,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,56,61,62,63,64,65,70,72,77,79,80,81,84,86,88,89,90,91,95,96,97,99,101,103,105,],[-4,-42,0,-35,-44,-57,-21,-26,-5,-4,-27,-41,-19,-64,-20,-59,-36,-43,-48,-17,-49,-51,-62,-24,-40,-23,-37,-39,-22,-56,-25,-16,-45,-47,-38,-50,-34,-55,-57,-54,-8,-9,-52,-7,-57,-66,-61,-53,-58,-46,-6,-60,-33,-14,-13,-3,-63,-65,-28,-18,-12,-1,-10,-11,-2,-15,]),'DOWNLEVEL':([0,13,20,44,54,],[2,2,2,-16,2,]),'NUMBER':([0,2,5,13,14,20,33,34,37,44,50,54,55,57,58,59,66,69,71,92,94,104,],[30,30,30,30,30,30,30,30,30,-16,30,30,30,30,30,30,30,30,30,30,30,30,]),'DPROD':([1,6,7,21,26,27,29,30,31,42,45,46,48,49,51,52,63,64,88,89,90,91,95,],[-42,-44,-57,-64,-43,-48,-49,-51,71,-56,-45,-47,-50,-66,-55,-57,-57,-66,-3,71,-65,-28,-18,]),'PRINT':([0,2,5,13,20,33,34,37,44,50,54,57,58,59,66,92,94,104,],[5,5,5,5,5,5,5,5,-16,5,5,5,5,5,5,5,5,5,]),'VARIABLES':([0,2,5,13,20,33,34,37,44,50,54,57,58,59,66,92,94,104,],[33,33,33,33,33,33,33,33,-16,33,33,33,33,33,33,33,33,33,]),'WORD':([0,2,5,9,13,14,15,17,20,33,34,36,37,44,50,54,55,57,58,59,66,69,71,92,94,104,],[7,52,52,60,7,63,66,67,7,52,52,76,52,-16,52,7,63,52,52,52,52,63,63,52,52,52,]),'DEFFUNC':([0,13,20,44,54,],[36,36,36,-16,36,]),'RETURN':([0,2,5,13,20,33,34,37,44,50,54,57,58,59,66,92,94,104,],[37,37,37,37,37,37,37,37,-16,37,37,37,37,37,37,37,37,37,]),'COLON':([1,4,6,7,18,21,23,25,26,27,29,30,31,35,39,40,42,45,46,47,48,49,51,52,56,60,61,63,64,65,67,70,72,75,77,80,81,88,89,90,91,95,102,],[-42,-35,-44,59,-41,-64,-59,-36,-43,-48,-49,-51,-62,-40,-37,-39,-56,-45,-47,-38,-50,-34,-55,-57,-9,85,-52,-57,-66,-61,87,-53,-58,93,-46,-60,-33,-3,-63,-65,-28,-18,104,]),'PYTHON':([0,2,5,13,20,33,34,37,44,50,54,57,58,59,66,92,94,104,],[12,12,12,12,12,12,12,12,-16,12,12,12,12,12,12,12,12,12,]),'APPLICATION':([0,13,20,44,54,],[9,9,9,-16,9,]),'RBRACE':([1,4,6,7,8,10,11,13,16,18,19,20,21,22,23,25,26,27,28,29,30,31,32,35,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,56,61,62,63,64,65,68,70,72,77,79,80,81,84,86,88,89,90,91,95,96,97,99,101,103,105,],[-42,-35,-44,-57,-21,-26,-5,-4,-27,-41,-19,-4,-64,-20,-59,-36,-43,-48,-17,-49,-51,-62,-24,-40,-23,-37,-39,-22,-56,-25,-16,-45,-47,-38,-50,-34,-55,-57,-54,-8,-9,-52,-7,-57,-66,-61,88,-53,-58,-46,-6,-60,-33,-14,-13,-3,-63,-65,-28,-18,-12,-1,-10,-11,-2,-15,]),'PLUSMINUS':([0,1,2,4,5,6,7,13,20,21,23,26,27,29,30,31,33,34,37,42,44,45,46,48,49,50,51,52,54,57,58,59,63,64,65,66,80,88,89,90,91,92,94,95,104,],[14,-42,14,55,14,-44,-57,14,14,-64,-59,-43,-48,-49,-51,-62,14,14,14,-56,-16,-45,-47,-50,-66,14,-55,-57,14,14,14,14,-57,-66,-61,14,-60,-3,-63,-65,-28,14,14,-18,14,]),'DEFINE':([0,13,20,44,54,],[15,15,15,-16,15,]),'STRING':([0,2,5,12,13,14,20,24,33,34,37,44,50,54,55,57,58,59,66,69,71,92,94,104,],[42,42,42,42,42,42,42,42,42,42,42,-16,42,42,42,42,42,42,42,42,42,42,42,42,]),'MODULE':([0,13,20,44,54,],[17,17,17,-16,17,]),'DIVIDER':([0,1,3,4,6,7,8,10,11,13,16,18,19,20,21,22,23,25,26,27,28,29,30,31,32,35,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,56,61,62,63,64,65,68,70,72,77,79,80,81,84,85,86,87,88,89,90,91,93,95,96,97,99,101,103,105,],[44,-42,44,-35,-44,-57,-21,-26,-5,44,-27,-41,-19,44,-64,-20,-59,-36,-43,-48,-17,-49,-51,-62,-24,-40,-23,-37,-39,-22,-56,-25,-16,-45,-47,-38,-50,-34,-55,-57,-54,-8,-9,-52,44,-57,-66,-61,44,-53,-58,-46,-6,-60,-33,-14,44,-13,44,-3,-63,-65,-28,44,-18,-12,-1,-10,-11,-2,-15,]),'LPAREN':([7,52,63,76,],[58,58,58,58,]),'LBRACE':([0,2,5,13,14,20,33,34,37,44,50,54,55,57,58,59,66,69,71,85,87,92,93,94,98,104,],[20,20,20,20,20,20,20,20,20,-16,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'COMMA':([1,4,6,18,21,23,25,26,27,29,30,31,35,39,40,42,45,46,47,48,49,51,52,56,61,63,64,65,70,72,73,74,77,80,81,83,88,89,90,91,95,100,],[-42,-35,-44,-41,-64,-59,-36,-43,-48,-49,-51,-62,-40,-37,-39,-56,-45,-47,-38,-50,-34,-55,-57,-9,-52,-57,-66,-61,-53,-58,-31,92,-46,-60,-33,92,-3,-63,-65,-28,-18,-32,]),'RBRACKET':([1,4,6,18,21,23,25,26,27,29,30,31,35,39,40,42,45,46,47,48,49,51,52,56,61,63,64,65,70,72,73,74,77,80,81,88,89,90,91,95,100,],[-42,-35,-44,-41,-64,-59,-36,-43,-48,-49,-51,-62,-40,-37,-39,-56,-45,-47,-38,-50,-34,-55,-57,-9,-52,-57,-66,-61,-53,-58,-31,91,-46,-60,-33,-3,-63,-65,-28,-18,-32,]),'QUESTION':([1,4,6,18,21,23,25,26,27,29,30,31,35,39,40,42,45,46,47,48,49,51,52,56,61,63,64,65,70,72,77,78,80,81,88,89,90,91,95,],[-42,-35,-44,-41,-64,-59,-36,-43,-48,-49,-51,-62,-40,-37,-39,-56,-45,-47,-38,-50,-34,-55,-57,-9,-52,-57,-66,-61,-53,-58,-46,94,-60,-33,-3,-63,-65,-28,-18,]),'RPAREN':([1,4,6,18,21,23,25,26,27,29,30,31,35,39,40,42,45,46,47,48,49,51,52,56,58,61,63,64,65,70,72,73,77,80,81,82,83,88,89,90,91,95,100,],[-42,-35,-44,-41,-64,-59,-36,-43,-48,-49,-51,-62,-40,-37,-39,-56,-45,-47,-38,-50,-34,-55,-57,-9,-29,-52,-57,-66,-61,-53,-58,-31,-46,-60,-33,95,-30,-3,-63,-65,-28,-18,-32,]),'DIVMUL':([1,6,7,21,23,26,27,29,30,31,42,45,46,48,49,51,52,63,64,65,80,88,89,90,91,95,],[-42,-44,-57,-64,69,-43,-48,-49,-51,-62,-56,-45,-47,-50,-66,-55,-57,-57,-66,69,69,-3,-63,-65,-28,-18,]),'EQUALS':([7,52,],[57,57,]),'IMPORT':([0,2,5,13,20,33,34,37,44,50,54,57,58,59,66,92,94,104,],[24,24,24,24,24,24,24,24,-16,24,24,24,24,24,24,24,24,24,]),'LBRACKET':([0,2,5,13,14,20,33,34,37,44,50,54,55,57,58,59,66,69,71,92,94,104,],[34,34,34,34,34,34,34,34,34,-16,34,34,34,34,34,34,34,34,34,34,34,34,]),'INPUT':([0,13,20,44,54,],[28,28,28,-16,28,]),'IF':([0,13,20,44,54,],[50,50,50,-16,50,]),'FLOAT':([0,2,5,13,14,20,33,34,37,44,50,54,55,57,58,59,66,69,71,92,94,104,],[51,51,51,51,51,51,51,51,51,-16,51,51,51,51,51,51,51,51,51,51,51,51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,69,71,92,94,104,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'inblock':([0,13,20,],[3,62,68,]),'alg0':([0,2,5,13,20,33,34,37,50,54,57,58,59,66,92,94,104,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'downlevel':([0,13,20,54,],[43,43,43,43,]),'func':([0,2,5,13,14,20,33,34,36,37,50,54,55,57,58,59,66,69,71,92,94,104,],[26,26,26,26,26,26,26,26,75,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'block':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,69,71,85,87,92,93,94,98,104,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,97,97,6,97,6,103,6,]),'module':([0,13,20,54,],[8,8,8,8,]),'equal':([0,2,5,13,20,33,34,37,50,54,57,58,59,66,92,94,104,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'if':([0,13,20,54,],[10,10,10,10,]),'metaexpr':([0,13,20,54,],[11,11,11,79,]),'dblock':([85,87,93,],[96,99,101,]),'args':([58,],[82,]),'divider':([0,3,13,20,62,68,85,87,93,],[13,54,13,13,54,54,98,98,98,]),'variables':([0,2,5,13,20,33,34,37,50,54,57,58,59,66,92,94,104,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'import':([0,2,5,13,20,33,34,37,50,54,57,58,59,66,92,94,104,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'application':([0,13,20,54,],[41,41,41,41,]),'input':([0,13,20,54,],[16,16,16,16,]),'define':([0,13,20,54,],[32,32,32,32,]),'return':([0,2,5,13,20,33,34,37,50,54,57,58,59,66,92,94,104,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'expr':([0,2,5,13,20,33,34,37,50,54,57,58,59,66,92,94,104,],[19,53,56,19,19,72,73,77,78,19,81,73,84,86,100,102,105,]),'list':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,69,71,92,94,104,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'str':([0,2,5,12,13,14,20,24,33,34,37,50,54,55,57,58,59,66,69,71,92,94,104,],[46,46,46,61,46,46,46,70,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'python':([0,2,5,13,20,33,34,37,50,54,57,58,59,66,92,94,104,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'alg3':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,69,71,92,94,104,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,90,21,21,21,]),'declare':([0,13,20,54,],[38,38,38,38,]),'deffunc':([0,13,20,54,],[22,22,22,22,]),'var':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,69,71,92,94,104,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'exprnoalg':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,69,71,92,94,104,],[49,49,49,49,64,49,49,49,49,49,49,64,49,49,49,49,64,64,49,49,49,]),'alg1':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,92,94,104,],[23,23,23,23,65,23,23,23,23,23,23,80,23,23,23,23,23,23,23,]),'print':([0,2,5,13,20,33,34,37,50,54,57,58,59,66,92,94,104,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'alg2':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,69,92,94,104,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,89,31,31,31,]),'float':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,69,71,92,94,104,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'comms':([34,58,],[74,83,]),'int':([0,2,5,13,14,20,33,34,37,50,54,55,57,58,59,66,69,71,92,94,104,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> inblock","S'",1,None,None,None),
  ('dblock -> block','dblock',1,'p_dblock','pars.py',39),
  ('dblock -> divider block','dblock',2,'p_dblock','pars.py',40),
  ('block -> LBRACE inblock RBRACE','block',3,'p_block','pars.py',45),
  ('inblock -> <empty>','inblock',0,'p_inblock','pars.py',49),
  ('inblock -> metaexpr','inblock',1,'p_inblock','pars.py',50),
  ('inblock -> inblock divider metaexpr','inblock',3,'p_inblock','pars.py',51),
  ('inblock -> divider inblock','inblock',2,'p_inblock','pars.py',52),
  ('inblock -> inblock divider','inblock',2,'p_inblock','pars.py',53),
  ('print -> PRINT expr','print',2,'p_print','pars.py',63),
  ('module -> MODULE WORD COLON dblock','module',4,'p_module','pars.py',67),
  ('deffunc -> DEFFUNC func COLON dblock','deffunc',4,'p_deffunc','pars.py',71),
  ('application -> APPLICATION WORD COLON dblock','application',4,'p_application','pars.py',75),
  ('define -> DEFINE WORD expr','define',3,'p_define','pars.py',79),
  ('declare -> WORD COLON expr','declare',3,'p_declare','pars.py',83),
  ('if -> IF expr QUESTION expr COLON expr','if',6,'p_if','pars.py',87),
  ('divider -> DIVIDER','divider',1,'p_divider','pars.py',91),
  ('input -> INPUT','input',1,'p_input','pars.py',95),
  ('func -> WORD LPAREN args RPAREN','func',4,'p_func','pars.py',99),
  ('metaexpr -> expr','metaexpr',1,'p_metaexpr','pars.py',104),
  ('metaexpr -> deffunc','metaexpr',1,'p_metaexpr','pars.py',105),
  ('metaexpr -> module','metaexpr',1,'p_metaexpr','pars.py',106),
  ('metaexpr -> application','metaexpr',1,'p_metaexpr','pars.py',107),
  ('metaexpr -> declare','metaexpr',1,'p_metaexpr','pars.py',108),
  ('metaexpr -> define','metaexpr',1,'p_metaexpr','pars.py',109),
  ('metaexpr -> downlevel','metaexpr',1,'p_metaexpr','pars.py',110),
  ('metaexpr -> if','metaexpr',1,'p_metaexpr','pars.py',111),
  ('metaexpr -> input','metaexpr',1,'p_metaexpr','pars.py',112),
  ('list -> LBRACKET comms RBRACKET','list',3,'p_list','pars.py',117),
  ('args -> <empty>','args',0,'p_args','pars.py',125),
  ('args -> comms','args',1,'p_args','pars.py',126),
  ('comms -> expr','comms',1,'p_comms','pars.py',131),
  ('comms -> comms COMMA expr','comms',3,'p_comms','pars.py',132),
  ('equal -> WORD EQUALS expr','equal',3,'p_equal','pars.py',139),
  ('expr -> exprnoalg','expr',1,'p_expr','pars.py',144),
  ('expr -> alg0','expr',1,'p_expr','pars.py',145),
  ('expr -> print','expr',1,'p_expr','pars.py',146),
  ('expr -> variables','expr',1,'p_expr','pars.py',147),
  ('expr -> python','expr',1,'p_expr','pars.py',148),
  ('expr -> import','expr',1,'p_expr','pars.py',149),
  ('expr -> equal','expr',1,'p_expr','pars.py',150),
  ('expr -> return','expr',1,'p_expr','pars.py',151),
  ('exprnoalg -> term','exprnoalg',1,'p_exprnoalg','pars.py',156),
  ('exprnoalg -> func','exprnoalg',1,'p_exprnoalg','pars.py',157),
  ('exprnoalg -> block','exprnoalg',1,'p_exprnoalg','pars.py',158),
  ('exprnoalg -> list','exprnoalg',1,'p_exprnoalg','pars.py',159),
  ('return -> RETURN expr','return',2,'p_return','pars.py',163),
  ('term -> str','term',1,'p_term','pars.py',167),
  ('term -> float','term',1,'p_term','pars.py',168),
  ('term -> int','term',1,'p_term','pars.py',169),
  ('term -> var','term',1,'p_term','pars.py',170),
  ('int -> NUMBER','int',1,'p_int','pars.py',174),
  ('python -> PYTHON str','python',2,'p_python','pars.py',178),
  ('import -> IMPORT str','import',2,'p_import','pars.py',182),
  ('downlevel -> DOWNLEVEL expr','downlevel',2,'p_downlevel','pars.py',186),
  ('float -> FLOAT','float',1,'p_float','pars.py',190),
  ('str -> STRING','str',1,'p_str','pars.py',194),
  ('var -> WORD','var',1,'p_var','pars.py',198),
  ('variables -> VARIABLES expr','variables',2,'p_variables','pars.py',202),
  ('alg0 -> alg1','alg0',1,'p_alg0','pars.py',213),
  ('alg0 -> alg0 PLUSMINUS alg1','alg0',3,'p_alg0','pars.py',214),
  ('alg0 -> PLUSMINUS alg1','alg0',2,'p_alg0','pars.py',215),
  ('alg1 -> alg2','alg1',1,'p_alg1','pars.py',224),
  ('alg1 -> alg1 DIVMUL alg2','alg1',3,'p_alg1','pars.py',225),
  ('alg2 -> alg3','alg2',1,'p_alg2','pars.py',232),
  ('alg2 -> alg2 DPROD alg3','alg2',3,'p_alg2','pars.py',233),
  ('alg3 -> exprnoalg','alg3',1,'p_alg3','pars.py',240),
]
